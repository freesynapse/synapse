
(Additional) Notes on noise

Wrote (yet) another implementation of Perlin noise, in core-tests/noise_test.hpp. One problem with
Perlin noise (and an advantage) is the fact that it repeats, with a period of 256. This means, for
the voxel world, that if we acquire one noise value per one unit in the world, the world would
repeat after 256 units. No good.

So, by increasing the frequency and lowering the step size, we can basically get infinite noise
values. For instance, a base frequency of 1.0 seems to be good for a step size of up to 2048. This
means that we get a repeat after 256 * 2048 voxels, that is 524288 voxels. Seems good enough for 
now. In principle, we can just increase the frequency:

       F  |  Resolution  |    World size
    ------+--------------+-----------------
      1.0 |     2048     |       524 288
      2.0 |     4096     |     1 048 576
      4.0 |     8192     |     2 097 152
      8.0 |    16384     |     4 194 304
     16.0 |    32768     |     8 388 608
     32.0 |    65536     |    16 777 216  
          |              |


Also, normalizing noise is beneficial. I've made som tests of the Perlin3.eval() function, and also
the Perlin3.fbm() function (with 5 octaves). Irregardless of the step size and the resolution,
as long as the frequency is held constant (in this case at 1.0), normalized Perlin3.eval() outputs
values between 0.0 and 1.0, with the a typical range of [0.1 ... 0.9]. The mean range is around 
0.55. Fractional noise (fbm()) ranges typically [0.2 ... 0.8] and is normally distributed. The mean
range is ~0.4.

Also, the number of octaves in the fractional noise algorithm does not matter. I've tested with
1, 3, 5, 7 and 9 octaves.

Also, for voxels, let's keep the amplitude set to 1.0 (as done in all experiments above) and vary
the meaning of the fractal noise amplitude outside of the noise class, in the biome generator or
equivalently.


For value noise, rotations work, and its faster than perlin noise (for fbm_5 a 1.7x speed increase,
and that is rotated value fbm vs 'plain' perlin fbm). Also, I think it looks better. Let's go with 
rotated value noise for now, and we will see later if we need perlin noise for something. 
Another advantage of value noise is that output is normalized to [0 ... 1], and for fbm_5 the range
was [~0.2 ... ~0.85], thus more consistent than perlin noise, whose range is normally distributed.

A new class is born; VxNoise, to be added to SynapseAddons.

Choosing the resolution and frequency of the noise is a bit tricy; as a preliminary I've chosen to 
increase the resolution to 2^16 (i.e. per unit in noise space, corresponding to 2^31 units in vx 
space, since wrap around occurs after 256 units in noise space; 2^16 * 2^8 = 2^24). For this to 
give reasonable results, for value noise (with a base frequency of 5.0), the frequency is scaled 
with the same factor to 5.0 * 2^16 ( = 327680.0f). When using this as 'base settings', the 3d 
value noise is reasonable:

Unexpectedly, though, the range of value noise decreases, with an increase in min value and a 
decrease in max value:





