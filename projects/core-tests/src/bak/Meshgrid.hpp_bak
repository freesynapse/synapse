
#pragma once

#include "PyHelper.hpp"
#include "Linspace.hpp"

#include "Synapse/Core.hpp"
#include "Synapse/Memory/MemoryTypes.hpp"
#include "Synapse/Renderer/Mesh/MeshShape.hpp"

#include <glm/glm.hpp>

namespace Syn
{

    class Meshgrid
    {
    protected:
        /*
         * For rendering, m_z and m_y correspond to X and Z coordinates, respectively. Naming 
         * convention based on mathematical standard, where x and y are horizontal, orthogonal axes 
         * and z is vertical.
         */
        Linspace m_x;
        Linspace m_y;
        long double* m_z = nullptr;
        uint32_t m_size = 0;    // no. elements in m_z

    public:
        Meshgrid() = default;
        Meshgrid(const Meshgrid&) = default;
        Meshgrid(const Linspace& _x, const Linspace& _y) :
            m_x(_x), m_y(_y)
        {
            SYN_CORE_TRACE("explicit constuctor called.");
        }
        ~Meshgrid() { if (m_z) delete[] m_z; }

        /* The X axis (Linspace) */
        const Linspace& getXAxis() { return m_x;    }
        /* The Y axis (Linspace) */
        const Linspace& getYAxis() { return m_y;    }
        /* Z values (computed) */
        long double* getZValues()  { return m_z;    }
        /* Number of Z values */
        uint32_t zsize()           { return m_size; }

    private:
        virtual void updateCoordinates() {}
    
    };

}
