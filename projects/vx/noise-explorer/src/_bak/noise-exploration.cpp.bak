
#include <iostream>
#include <fstream>
#include <glm/glm.hpp>

#include <Synapse.hpp>
#include <Synapse/SynapseMain.hpp>

#include "MeshTerrainManager.h"
#include "MeshTerrain.h"

using namespace Syn;

//---------------------------------------------------------------------------------------
class layer : public Layer
{
public:
	layer() : Layer("layer") {}
	virtual ~layer() {}

	virtual void onAttach() override;
	virtual void onUpdate(float _dt) override;
	virtual void onImGuiRender() override;
	void onKeyDownEvent(Event* _e);
	void onMouseButtonEvent(Event* _e);
	void handleInput(float _dt);


private:
	// synapse objects
	glm::vec3 m_lightPosition;
	Ref<MeshTerrainManager> m_terrainManager = nullptr;
	Ref<MeshTerrain> m_terrain = nullptr;
	Ref<Shader> m_shader = nullptr;
	
	Ref<Font> m_font = nullptr;
	Ref<PerspectiveCamera> m_camera = nullptr;
	Ref<Framebuffer> m_renderBuffer = nullptr;

	// flags
	bool m_meshDrag = false;
	bool m_wireframeMode = false;
	bool m_bCameraMode = true;

	bool m_showTerrain = true;
	bool m_showNormals = false;
	bool m_showTangents = false;
	bool m_showBitangents = false;
};
class NoiseExploration : public Application
{
public:
	NoiseExploration()
	{
		this->pushLayer(new layer);
	}
};
Application* CreateSynapseApplication() { return new NoiseExploration(); }
//---------------------------------------------------------------------------------------
void layer::onAttach()
{
	// register event callback

	EventHandler::register_callback(EventType::INPUT_KEY, SYN_EVENT_MEMBER_FNC(layer::onKeyDownEvent));
	EventHandler::register_callback(EventType::INPUT_MOUSE_BUTTON, SYN_EVENT_MEMBER_FNC(layer::onMouseButtonEvent));


	// load (some) shaders

	ShaderLibrary::load("../assets/shaders/debugShader.glsl");
	ShaderLibrary::load("../assets/shaders/debugPointShader.glsl");
	ShaderLibrary::load("../assets/shaders/diffuseLightShader.glsl");


	// load font

	m_font = MakeRef<Font>("../assets/ttf/ubuntu.mono.ttf", 16);
	m_font->setColor(glm::vec4(1.0f, 1.0f, 1.0f, 1.0f));


	// camera

	m_camera = API::newPerspectiveCamera(glm::perspectiveFov(glm::radians(45.0f), SCREEN_WIDTH_F, SCREEN_HEIGHT_F, 0.1f, 1000.0f));
	m_camera->setPosition(glm::vec3(1, 3, 1));
	m_camera->setXAngle(0.0f);
	m_camera->setYAngle(65.0f);
	// set the cursor to fps camera mode
	EventHandler::push_event(new WindowToggleFrozenCursorEvent(m_bCameraMode));
	EventHandler::push_event(new WindowToggleCursorEvent(!m_bCameraMode));


	// framebuffer

	// the final, rendered scene framebuffer, for hand-off to ImGui for rendering
	m_renderBuffer = API::newFramebuffer(ColorFormat::RGBA16F, glm::ivec2(0), 1, true, true, "render_buffer");


	// noise exploration

	m_lightPosition = glm::vec3(1, 2, 1);
	MeshCreator::createDebugCube(m_lightPosition, 0.05f, "light01");
	MeshCreator::setDebugRenderColor(glm::vec3(1.0f));

	//m_terrainManager = MakeRef<MeshTerrainManager>(2, 128, true);
	//m_terrainManager->updateChunks(m_camera->getPosition());
	m_terrain = MakeRef<MeshTerrain>(2, 128);
	m_terrain->setupVertexData(7, 1.5f);
	m_shader = ShaderLibrary::get("diffuseLightShader");

	// misc setup

	Renderer::setClearColor(0.0f, 0.0f, 0.0f, 1.0f);

	Renderer::get().executeRenderCommands();

}
//---------------------------------------------------------------------------------------
void layer::onUpdate(float _dt)
{
	static float fontHeight = (float)m_font->getFontHeight() + 1.0f;


	// handle input
	handleInput(_dt);


	// update camera
	m_camera->setUpdateMode(m_bCameraMode);
	m_camera->onUpdate(_dt*0.1f);


	// bind presenting framebuffer
	m_renderBuffer->bind();


	// -- BEGINNING OF SCENE -- //

	// toggle wireframe
	if (m_wireframeMode) Renderer::enableWireFrame();

	// clear the screen
	Renderer::setClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	Renderer::clear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// load/unload chunks
	//m_terrainManager->updateChunks(m_camera->getPosition());

	// render terrain
	//static Ref<Shader> debugShader = ShaderLibrary::get("diffuseLightShader");
	//m_terrainManager->render(nullptr, m_camera, m_lightPosition);
	m_shader->enable();
	m_shader->setMatrix4fv("u_view_projection_matrix", m_camera->getViewProjectionMatrix());
	glm::mat4 modelMatrix = m_terrain->getModelMatrix();
	glm::mat3 normalMatrix = glm::mat3(glm::transpose(glm::inverse(modelMatrix)));
	m_shader->setMatrix4fv("u_model_matrix", modelMatrix);
	m_shader->setMatrix3fv("u_normal_matrix", normalMatrix);
	m_shader->setUniform3fv("u_diffuse_light_position", m_lightPosition);
	m_terrain->getVertexArray()->bind();
	Renderer::drawIndexed(m_terrain->getVertexArray()->getIndexCount());
	//

	if (m_showNormals)		Renderer::debugNormals(m_terrain, m_camera, 0.05f);
	if (m_showTangents)		Renderer::debugTangents(m_terrain, m_camera, 0.05f);
	if (m_showBitangents)	Renderer::debugBitangents(m_terrain, m_camera, 0.05f);

	// render debug meshes
	MeshCreator::renderDebugMesh("light01", m_camera, false);

	// toggle wireframe (back)
	if (m_wireframeMode) Renderer::disableWireFrame();

	// -- END OF SCENE -- //


	// Text rendering 
	// TODO: all text rendering should go into an overlay layer.
	m_font->beginRenderBlock();
	m_font->addString(2.0f, fontHeight, "fps=%.0f  VSYNC= %s", TimeStep::getFPS(), Application::get().getWindow().isVSYNCenabled() ? "ON" : "OFF");
	glm::vec3 camPos = m_camera->getPosition();
	m_font->addString(2.0f, fontHeight * 2, "camera: x=%.1f  y=%.1f  pos [ %.0f  %.0f  %.0f ]", m_camera->getXAngle(), m_camera->getYAngle(), camPos.x, camPos.y, camPos.z);
	glm::vec2 delta = m_camera->getMouseDelta();
	glm::vec2 pos = InputManager::get_mouse_position();
	m_font->addString(2.0f, fontHeight * 3, "mouse pos [ %.0f  %.0f ],  camera delta [ %.0f  %.0f ]", pos.x, pos.y, delta.x, delta.y);
	m_font->endRenderBlock();


	// ...and we're done! hand-off to ImGui to render the texture (scene) in the viewport pane.
	m_renderBuffer->bindDefaultFramebuffer();


}
//---------------------------------------------------------------------------------------
void layer::onKeyDownEvent(Event* _e)
{
	KeyDownEvent* e = dynamic_cast<KeyDownEvent*>(_e);
	
	static bool vsync = true;
	static Ref<MeshDebug> light = MeshCreator::getMeshDebugPtr("light01");


	if (e->getAction() == GLFW_PRESS)
	{
		switch (e->getKey())
		{
		case SYN_KEY_LEFT:
			m_lightPosition += glm::vec3(-0.1f, 0, 0);
			light->setPosition(m_lightPosition);
			break;

		case SYN_KEY_RIGHT:
			m_lightPosition += glm::vec3(0.1f, 0, 0);
			light->setPosition(m_lightPosition);
			break;

		case SYN_KEY_UP:
			m_lightPosition += glm::vec3(0, 0, -0.1f);
			light->setPosition(m_lightPosition);
			break;

		case SYN_KEY_DOWN:
			m_lightPosition += glm::vec3(0, 0, 0.1f);
			light->setPosition(m_lightPosition);
			break;

		case SYN_KEY_R:
			break;

		case SYN_KEY_Z:
			vsync = !vsync;
			Application::get().getWindow().setVSYNC(vsync);
			break;

		case SYN_KEY_C:
			break;

		case SYN_KEY_V:
			m_renderBuffer->saveAsPNG();
			break;

		case SYN_KEY_ESCAPE:
			EventHandler::push_event(new WindowCloseEvent());
			break;

		case SYN_KEY_F5:
			m_showNormals = !m_showNormals;
			break;

		case SYN_KEY_F6:
			m_showTangents = !m_showTangents;
			break;

		case SYN_KEY_F7:
			m_showBitangents = !m_showBitangents;
			break;

		case SYN_KEY_F8:
			m_showTerrain = !m_showTerrain;
			break;

		case SYN_KEY_F4:
			m_wireframeMode = !m_wireframeMode;
			break;

		case SYN_KEY_TAB:
			m_bCameraMode = !m_bCameraMode;
			EventHandler::push_event(new WindowToggleFrozenCursorEvent(m_bCameraMode));
			EventHandler::push_event(new WindowToggleCursorEvent(!m_bCameraMode));
			// if entering camera mode again, adjust cursor position
			if (m_bCameraMode)
			{
				glm::vec2 half_vp = Renderer::getViewportF() * 0.5f;
				Application::get().getWindow().setCursorPos(glm::vec2(floor(half_vp.x), floor(half_vp.y)));
				m_camera->resetMousePosition();
			}
			break;
		}
	}

}
//---------------------------------------------------------------------------------------
void layer::onMouseButtonEvent(Event* _e)
{
}
//---------------------------------------------------------------------------------------
void layer::onImGuiRender()
{
	static bool p_open = true;

	static bool opt_fullscreen_persistant = true;
	static ImGuiDockNodeFlags opt_flags = ImGuiDockNodeFlags_None;
	bool opt_fullscreen = opt_fullscreen_persistant;

	// We are using the ImGuiWindowFlags_NoDocking flag to make the parent window not dockable into,
	// because it would be confusing to have two docking targets within each others.
	ImGuiWindowFlags window_flags = ImGuiWindowFlags_MenuBar | ImGuiWindowFlags_NoDocking;
	if (opt_fullscreen)
	{
		ImGuiViewport* viewport = ImGui::GetMainViewport();
		ImGui::SetNextWindowPos(viewport->Pos);
		ImGui::SetNextWindowSize(viewport->Size);
		ImGui::SetNextWindowViewport(viewport->ID);
		ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
		ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 0.0f);
		window_flags |= ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove;
		window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_NoNavFocus;
	}

	// When using ImGuiDockNodeFlags_PassthruDockspace, DockSpace() will render our background and handle the pass-thru hole, so we ask Begin() to not render a background.
	if (opt_flags & ImGuiDockNodeFlags_PassthruCentralNode)
		window_flags |= ImGuiWindowFlags_NoBackground;

	//-----------------------------------------------------------------------------------
	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
	ImGui::Begin("synapse-core", &p_open, window_flags);
	ImGui::PopStyleVar();

	if (opt_fullscreen)
		ImGui::PopStyleVar(2);

	// Dockspace
	ImGuiIO& io = ImGui::GetIO();
	if (io.ConfigFlags & ImGuiConfigFlags_DockingEnable)
	{
		ImGuiID dockspace_id = ImGui::GetID("dockspace");
		ImGui::DockSpace(dockspace_id, ImVec2(0.0f, 0.0f), opt_flags);
	}

	//-----------------------------------------------------------------------------------

#ifdef DEBUG_IMGUI_LOG
	ImGui::Begin("synapse-core::log");
	ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
	ImGuiTextBuffer buffer = Log::getImGuiBuffer();
	const char* bufBegin = buffer.begin();
	const char* bufEnd = buffer.end();

	// only process lines within the visible area
	ImGuiListClipper clipper;
	ImVector<int> lineOffsets = Log::getImGuiLineOffset();
	clipper.Begin(lineOffsets.Size);
	while (clipper.Step())
	{
		for (int line_no = clipper.DisplayStart; line_no < clipper.DisplayEnd; line_no++)
		{
			const char* lineStart = bufBegin + lineOffsets[line_no];
			const char* lineEnd = (line_no + 1 < lineOffsets.Size) ? (bufBegin + lineOffsets[line_no + 1] - 1) : bufEnd;
			ImGui::TextUnformatted(lineStart, lineEnd);
		}
	}

	// scroll to end
	ImGui::SetScrollHereY(1.0f);


	//ImGui::TextUnformatted(bufBegin, bufEnd);
	ImGui::PopStyleVar();
	ImGui::End();
#endif

	//-----------------------------------------------------------------------------------

	// set the 'rest' of the window as the viewport
	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0, 0));
	ImGui::Begin("viewport");
	static ImVec2 oldSize;
	ImVec2 viewportSize = ImGui::GetContentRegionAvail();

	if (viewportSize.x != oldSize.x && viewportSize.y != oldSize.y)
	{
		// dispatch a viewport resize event -- registered classes will receive this.
		EventHandler::push_event(new ViewportResizeEvent(glm::vec2(viewportSize.x, viewportSize.y)));
		SYN_CORE_TRACE("viewport [ ", viewportSize.x, ", ", viewportSize.y, " ]");
		oldSize = viewportSize;
	}

	// direct ImGui to the framebuffer texture
	ImGui::Image((void*)m_renderBuffer->getColorAttachmentIDn(0), viewportSize, { 0, 1 }, { 1, 0 });

	ImGui::End();
	ImGui::PopStyleVar();

	// end root
	ImGui::End();

}
//---------------------------------------------------------------------------------------
void layer::handleInput(float _dt)
{
}

